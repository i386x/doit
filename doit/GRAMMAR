Basic commands:
  pushparser
  newparser
  applyparser
  token
  skip
  group
===============================================================================
== DoIt! grammar                                                             ==
===============================================================================
-- Prelude
pushparser verybase
newparser base
group WHITESPACE \ |\b|\f|
group UPPER A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z
group LOWER a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z
group DIGIT 0|1|2|3|4|5|6|7|8|9
group ALPHA [UPPER]|[LOWER]
group LETTER [ALPHA]|\_

token SKIP [WHITESPACE]+
token SKIP \#[ANYCHAR]*\n?
token DELIMITER \n|\;

rule start : statement*
rule statement : assignment

<start> : <statement>*
        | <basic_statement>*
        ;
<basic_statement> : DEFINED_WORD
<statement> : <assignment>
            | <definition>
            | <expression>
            ;
<assignment> : WORD ASSIGNOP <expression>
             ;
<definition> : WORD <argdefs>? DEFOP (WORD DEL)? <statement>* ENDDEF
             ;
<argdefs> : ARGNAME
          | ARGNAME <argdefs>
          ;
<expression> : <expression> BINOP <expression>
             | <expression> UNOP
             | LEFTB <expression> RIGHTB
             | WORD <expression>*
             ;
-------------------------------------------------------------------------------
token WORD [SYMBOLS]+
tokens ASSIGNOP \=, \:\=
token DEFOP \:
token ARGNAME \%[LETTER][DIGIT_OR_LETTER]*
token LEFTB \(
token RIGHTB \)

===============================================================================
<start> ::= <statement>*
<statement> ::= <assignment>
              | <definition>
              | <command> DELIMITER

<assignment> ::= VAREXP (
                   "=" <command>
                 | ":=" <list>
                 ) DELIMITER
<definition> ::= CMDEXP <paramsdef>? ":" (<command> DELIMITER)?
                 <statement>* BOT
<command> ::= <cmdword> <param>*

<cmdword> ::= <param> - SPECEXP
<paramsdef> ::= <pattern> <patterns>
<pattern> ::= <qpattern>
            | "(" <pattern> ")"
            | VAREXP
            | SQSTR
            | DQSTR
<param> ::= WORD
          | VAREXP
          | CMDEXP
          | SPECEXP
          | SQSTR
          | DQSTR
          | TEMPLATE
          | <hash>
          | <subcommand>

<hash> ::= "{" (<hitem> ("," <hitem>)*)? "}"
<hitem> ::= KEYEXP "=" <command>
<subcommand> ::= "(" <command> ")"
               | "@" <command> DELIMITER

<list> ::= <litem>*
<litem> ::= <param> - <subcommand>
          | "$(" <command> ")"
          | "(" <list> ")"

-------------------------------------------------------------------------------
-- Tokens                                                                    --
-------------------------------------------------------------------------------

BOT ::= /blank line/ | <eof>
DELIMITER ::= ";" | "\n" | <eof>
WORD ::= (VARUSE | <symbol> | ("\" <reserved>))+
VARNAME ::= <letter> (<letter> | <digit>)*
VARUSE ::= "$" VARNAME
VAREXP ::= (VARUSE | <letter>) (VARUSE | <letter> | <digit>)*
CMDNAME ::= <lower> (<lower> | <digit>)* ("-" (<lower> | <digit>)+)*
CMDEXP ::= (VARUSE | <lower>) (VARUSE | <lower> | <digit>)*
           ("-" (VARUSE | <lower> | <digit>)+)*
SPECIFIER ::= "." VARNAME
SPECEXP ::= "." VARUSE
KEY ::= VARNAME SPECIFIER*
KEYEXP ::= VAREXP SPECEXP*
SQSTR ::= "'" <sqchar>* "'"
DQSTR ::= '"' <dqchar>* '"'
TEMPLATE ::= "{{\n" (<tchar> & !"}}")* "}}"

<sqchar> ::= <strchar> - "'"
<dqchar> ::= <strchar> - '"'
<strchar> ::= <printable> | <escape> | <ws> | <utf8>
<tchar> ::= <anychar> - "%" | "%%" | "%" VARNAME
<escape> ::= "\\" (
               "\n" |
               "a" | "b" | "t" | "n" | "v" | "f" | "r" |
               (<odigit> <odigit> <odigit>) |
               ("x" <xdigit> <xdigit>) |
               ("u" <xquad>) |
               ("U" <xquad> <xquad>) |
               (<printable> - <reserved-escape>)
             )
<symbol> ::= <printable> - <reserved>
<reserved> ::= '"' | "#" | "$" | "'" | "(" | ")" | ";" | "\\" | "`" |
               "{" | "}"
<reserved-escape> ::= "a" | "b" | "t" | "n" | "v" | "f" | "r" |
                      "x" | "u" | "U"
<odigit> ::= "0" | ... | "7"
<digit> ::= "0" | ... | "9"
<xdigit> ::= <digit> | "a" | ... | "f" | "A" | ... | "F"
<xquad> ::= <xdigit> <xdigit> <xdigit> <xdigit>
<lower> ::= "a" | ... | "z"
<upper> ::= "A" | ... | "Z"
<alpha> ::= <lower> | <upper>
<alnum> ::= <alpha> | <digit>
<letter> ::= <alpha> | "_"
<ws> ::= " " | "\t" | "\n"
<printable> ::= "!" | ... | "~"
<utf8> ::= /legal UTF-8 character (byte sequence)/
<anychar> ::= 0x00 | ... | 0xFF
<eof> ::= /end of file/
